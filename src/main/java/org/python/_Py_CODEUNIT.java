// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union {
 *     uint16_t cache;
 *     struct {
 *         uint8_t code;
 *         uint8_t arg;
 *     } op;
 * }
 * }
 */
public class _Py_CODEUNIT {

    _Py_CODEUNIT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        Python_h.C_SHORT.withName("cache"),
        _Py_CODEUNIT.op.layout().withName("op")
    ).withName("$anon$38:9");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort cache$LAYOUT = (OfShort)$LAYOUT.select(groupElement("cache"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t cache
     * }
     */
    public static final OfShort cache$layout() {
        return cache$LAYOUT;
    }

    private static final long cache$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t cache
     * }
     */
    public static final long cache$offset() {
        return cache$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t cache
     * }
     */
    public static short cache(MemorySegment union) {
        return union.get(cache$LAYOUT, cache$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t cache
     * }
     */
    public static void cache(MemorySegment union, short fieldValue) {
        union.set(cache$LAYOUT, cache$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     uint8_t code;
     *     uint8_t arg;
     * }
     * }
     */
    public static class op {

        op() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            Python_h.C_CHAR.withName("code"),
            Python_h.C_CHAR.withName("arg")
        ).withName("$anon$40:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfByte code$LAYOUT = (OfByte)$LAYOUT.select(groupElement("code"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t code
         * }
         */
        public static final OfByte code$layout() {
            return code$LAYOUT;
        }

        private static final long code$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t code
         * }
         */
        public static final long code$offset() {
            return code$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t code
         * }
         */
        public static byte code(MemorySegment struct) {
            return struct.get(code$LAYOUT, code$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t code
         * }
         */
        public static void code(MemorySegment struct, byte fieldValue) {
            struct.set(code$LAYOUT, code$OFFSET, fieldValue);
        }

        private static final OfByte arg$LAYOUT = (OfByte)$LAYOUT.select(groupElement("arg"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t arg
         * }
         */
        public static final OfByte arg$layout() {
            return arg$LAYOUT;
        }

        private static final long arg$OFFSET = 1;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t arg
         * }
         */
        public static final long arg$offset() {
            return arg$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t arg
         * }
         */
        public static byte arg(MemorySegment struct) {
            return struct.get(arg$LAYOUT, arg$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t arg
         * }
         */
        public static void arg(MemorySegment struct, byte fieldValue) {
            struct.set(arg$LAYOUT, arg$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout op$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("op"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     uint8_t code;
     *     uint8_t arg;
     * } op
     * }
     */
    public static final GroupLayout op$layout() {
        return op$LAYOUT;
    }

    private static final long op$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     uint8_t code;
     *     uint8_t arg;
     * } op
     * }
     */
    public static final long op$offset() {
        return op$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     uint8_t code;
     *     uint8_t arg;
     * } op
     * }
     */
    public static MemorySegment op(MemorySegment union) {
        return union.asSlice(op$OFFSET, op$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     uint8_t code;
     *     uint8_t arg;
     * } op
     * }
     */
    public static void op(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, op$OFFSET, op$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union {
 *     unsigned short _Sh[2];
 *     float _Val;
 * }
 * }
 */
public class _float_val {

    _float_val() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.sequenceLayout(2, Python_h.C_SHORT).withName("_Sh"),
        Python_h.C_FLOAT.withName("_Val")
    ).withName("$anon$226:9");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout _Sh$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("_Sh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short _Sh[2]
     * }
     */
    public static final SequenceLayout _Sh$layout() {
        return _Sh$LAYOUT;
    }

    private static final long _Sh$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short _Sh[2]
     * }
     */
    public static final long _Sh$offset() {
        return _Sh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short _Sh[2]
     * }
     */
    public static MemorySegment _Sh(MemorySegment union) {
        return union.asSlice(_Sh$OFFSET, _Sh$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short _Sh[2]
     * }
     */
    public static void _Sh(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, _Sh$OFFSET, _Sh$LAYOUT.byteSize());
    }

    private static long[] _Sh$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned short _Sh[2]
     * }
     */
    public static long[] _Sh$dimensions() {
        return _Sh$DIMS;
    }
    private static final VarHandle _Sh$ELEM_HANDLE = _Sh$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned short _Sh[2]
     * }
     */
    public static short _Sh(MemorySegment union, long index0) {
        return (short)_Sh$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned short _Sh[2]
     * }
     */
    public static void _Sh(MemorySegment union, long index0, short fieldValue) {
        _Sh$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    private static final OfFloat _Val$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("_Val"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float _Val
     * }
     */
    public static final OfFloat _Val$layout() {
        return _Val$LAYOUT;
    }

    private static final long _Val$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float _Val
     * }
     */
    public static final long _Val$offset() {
        return _Val$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float _Val
     * }
     */
    public static float _Val(MemorySegment union) {
        return union.get(_Val$LAYOUT, _Val$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float _Val
     * }
     */
    public static void _Val(MemorySegment union, float fieldValue) {
        union.set(_Val$LAYOUT, _Val$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

